import java.util.*;

public class WordLadder {
    
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        // Convert wordList to a HashSet for O(1) lookups
        Set<String> wordSet = new HashSet<>(wordList);
        
        // If endWord is not in the list, no transformation is possible
        if (!wordSet.contains(endWord)) {
            return 0;
        }
        
        // Use BFS to find shortest path
        Queue<String> queue = new LinkedList<>();
        Set<String> visited = new HashSet<>();
        
        queue.add(beginWord);
        visited.add(beginWord);
        
        int level = 1; // Start with level 1 (beginWord doesn't count)
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            
            // Process all words at current level
            for (int i = 0; i < size; i++) {
                String currentWord = queue.poll();
                
                // If we reached the endWord, return the level (which is the length)
                if (currentWord.equals(endWord)) {
                    return level;
                }
                
                // Try changing each character at each position
                char[] chars = currentWord.toCharArray();
                for (int j = 0; j < chars.length; j++) {
                    char originalChar = chars[j];
                    
                    // Try all possible characters
                    for (char c = 'a'; c <= 'z'; c++) {
                        if (c == originalChar) {
                            continue;
                        }
                        
                        chars[j] = c;
                        String newWord = new String(chars);
                        
                        // If this word exists in the wordList and hasn't been visited
                        if (wordSet.contains(newWord) && !visited.contains(newWord)) {
                            queue.add(newWord);
                            visited.add(newWord);
                        }
                    }
                    
                    // Restore original character for next iteration
                    chars[j] = originalChar;
                }
            }
            
            // Move to next level
            level++;
        }
        
        // No transformation sequence exists
        return 0;
    }
    
    // Main method for testing
    public static void main(String[] args) {
        WordLadder solution = new WordLadder();
        
        // Test case 1: "cot" -> "hot" -> "hit" (length = 3)
        List<String> wordList1 = Arrays.asList("hot", "dot", "dog", "lot", "log", "cog", "hit", "cot");
        System.out.println("Test 1: " + solution.ladderLength("cot", "hit", wordList1)); // Expected: 3
        
        // Test case 2: "dog" -> "cog" (length = 2)
        List<String> wordList2 = Arrays.asList("hot", "dot", "dog", "lot", "log", "cog");
        System.out.println("Test 2: " + solution.ladderLength("dog", "cog", wordList2)); // Expected: 2
        
        // Test case 3: No transformation possible
        List<String> wordList3 = Arrays.asList("hot", "dot", "dog", "lot", "log");
        System.out.println("Test 3: " + solution.ladderLength("hit", "cog", wordList3)); // Expected: 0
    }
}
